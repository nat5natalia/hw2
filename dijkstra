#include <iostream>

#include <vector>

#include <climits>



using namespace std;



class Dijkstra {

private:

    int V;

    vector<vector<int>> graph;



    int minDistance(vector<int>& dist, vector<bool>& visited) {

        int minDist = INT_MAX, minIndex;

        

        for (int i = 0; i < V; ++i) {

            if (!visited[i] && dist[i] < minDist) {

                minDist = dist[i];

                minIndex = i;

            }

        }

        

        return minIndex;

    }



public:

    Dijkstra(int vertices) : V(vertices) {

        graph = vector<vector<int>>(V, vector<int>(V, 0));

    }



    void addEdge(int u, int v, int weight) {

        graph[u][v] = weight;

        graph[v][u] = weight;

    }



    void shortestPath(int src) {

        vector<int> dist(V, INT_MAX);

        vector<bool> visited(V, false);

        dist[src] = 0;



        for (int count = 0; count < V - 1; ++count) {

            int u = minDistance(dist, visited);

            visited[u] = true;



            for (int v = 0; v < V; ++v) {

                if (!visited[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {

                    dist[v] = dist[u] + graph[u][v];

                }

            }

        }



        cout << "Vertex \t Distance from Source" << endl;

        for (int i = 0; i < V; ++i) {

            cout << i << "\t" << dist[i] << endl;

        }

    }

};



int main() {

    Dijkstra g(9);

    g.addEdge(0, 1, 4);

    g.addEdge(0, 7, 8);

    g.addEdge(1, 2, 8);

    g.addEdge(1, 7, 11);

    g.addEdge(2, 3, 7);

    g.addEdge(2, 8, 2);

    g.addEdge(2, 5, 4);

    g.addEdge(3, 4, 9);

    g.addEdge(3, 5, 14);

    g.addEdge(4, 5, 10);

    g.addEdge(5, 6, 2);

    g.addEdge(6, 7, 1);

    g.addEdge(6, 8, 6);

    g.addEdge(7, 8, 7);



    g.shortestPath(0);



    return 0;

}
